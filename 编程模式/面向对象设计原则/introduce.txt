单一职责原则 （SRP）- 一个类只做该做的事情（类的设计要高内聚）
开闭原则 （OCP）- 软件实体应该对扩展开发对修改关闭

依赖倒转原则（DIP）- 面向抽象编程（在弱类型语言中已经被弱化）
	高层模块不应该依赖低层模块，二者应该依赖于抽象。在没有遵循DIP的情况下，高层模块直接依赖于低层模块的实现细		节。这意味着，当低层模块发生变化时（如更换数据库），高层模块也需要相应修改，增加了维护成本和风险

里氏替换原则（LSP） - 任何时候可以用子类对象替换掉父类对象
接口隔离原则（ISP）- 接口要小而专不要大而全（Python中没有接口的概念）
合成聚合复用原则（CARP） - 优先使用强关联关系而不是继承关系复用代码
最少知识原则（迪米特法则，LoD）- 不要给没有必然联系的对象发消息